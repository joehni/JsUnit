/*
JsUnit - a JUnit port for JavaScript
Copyright (C) 1999,2000,2001,2002 Joerg Schaible

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation in version 2 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Test suites built with JsUnit are derivative works derived from tested 
classes and functions in their production; they are not affected by this 
license.
*/

/*!

\page products Products

This section will give some hints using JsUnit in some of the \ref
enabledproducts mensioned in the compatibility table.

\section spidermonkey SpiderMonkey

<a href="http://www.mozilla.org/js/spidermonkey">SpiderMoney</a> is the name
of the JavaScript engine from <a href="www.mozilla.org">mozilla.org</a>
written completely in C. Depending on the configuration, the engine is even
capable of compiling the JavaScript.  Since it is Open Source and especially
designed for usage in other products, you can find nowadays a lot of
applications using SpiderMonkey as easy scripting environment. Mozilla browser
itself (and therefore the Netscape browser also) is using this engine in their
browsers. This engine extremly fast and reliable.

Early version built into the iPlanet Web Server did not seem have an Error
object.

\subsection spidermonkeyshell SpiderMonkey's js / jsshell

The SpiderMonkey sources contain also a shell that is able to execute
standalone JavaScript sources. You have to optain the sources from the <a
href="http://www.mozilla.org/cvs.html">CVS</a> or from a defined tarball from
<a href="ftp://ftp.mozilla.org/pub/js/">ftp://ftp.mozilla.org/pub/js/</a> and
<a href="http://lxr.mozilla.org/mozilla/source/js/src/README.html">build the
shell</a> yourself.

\section rhino Rhino

<a href="http://www.mozilla.org/rhino/index.html">Rhino</a> is the name of the
JavaScript engine from <a href="www.mozilla.org">mozilla.org</a> written
completely in Java. Depending on the configuration, the engine is even capable
of translating the code to Java and compile it automatically. Since it is Open
Source and especially designed for usage in other products, you can find
nowadays a lot of applications using Rhino as easy scripting environment.  The
engine is shipped in the file <i>js.jar</i>. 

The version 1.5RC3 (and possibly earlier versions) has a bug and will throw a
TypeError if the method toString is called for a class derived from Error. See
<a href="http://bugzilla.mozilla.org/show_bug.cgi?id=181654">Bug 181654</a>.
JsUnit is able to compensate this bug.

\subsection rhinoshell Rhino Shell

The distribution of Rhino includes a shell, that can be used as command line
version to execute standalone scripts. This shell implements some commands not
available in the JavaScript standard. Concerning JsUnit this is \c print to
write to the console and \c load to load other JavaScript files. Call the
engine with

\htmlonly
<div class="fragment"><pre>
java org.mozilla.javascript.tools.shell.Main <i>&lt;filename&gt;.js</i></pre>
</div>
\endhtmlonly

Additionally the engine will also throw a TypeError running JsUnit if
optimization is enabled (greater 0). I have not investigated on this further.

There is also a basic debugger available calling

\htmlonly
<div class="fragment"><pre>
java org.mozilla.javascript.tools.debugger.Main <i>&lt;filename&gt;.js</i></pre>
</div>
\endhtmlonly

\image html rhinodebugger.png

\section winscript Windows Script

Microsoft's JavaScript implementation named JScript is part of the <a
href="http://msdn.microsoft.com/scripting/">Windows Script</a> engine (also
coming with the Operating System). This engine is able to run a lot of
languages, JScript is just one among others.  Microsoft offers in the package
JScript and VBScript, other venders offer other languages that uses the
engine. Any application may use the scripting engine and process scripts in
any of the registered languages.

The JScript implementation up-to version 5.6 has an incompatible definition of
the Error class, they do not provide the Error#name and Error#message members.
Early versions also miss the Array#push and Array#pop member functions that
are in this case provided by JsUnit.

\subsection cscript Windows Script Host

The Windows Script host has two utilities running scripts from command-line:
cscript and wscript. Both utilities recognize the file extension and will run
JScript files directly. wscript will execute them in a GUI environment, while
cscript is a console application running the script in the console. JScript
code can be within normal .js files or the JScript files can be included using
a Windows Script Host (.wsf) file. JsUnit delivers a sample for both variants.

See description to \ref wsdebug for debugging. Alternativly you
can use \ref interdev.

\subsection iexplore Internet Explorer

The Internet Explorer's JScript capabilitites are inherited from the installed
\ref cscript. Therefore even an Internet Explorer 3.x may be able to run
JsUnit, if the engine was updated seperatly. The Internet Explorer adds DOM
objects to the JScript. The DOM is differrent between the various Internet
explorer versions.

Use the HTML include tag to add JsUnit to your scripts. See the delivered
examples. You might debug every script also using the \ref wsdebug or advanced
development tools from Microsoft.

\subsection wsdebug Windows Script Debugger

The Microsoft Script Debugger is also available at <a
href="http://msdn.microsoft.com/downloads/default.asp?URL=/downloads/sample.asp?url=/msdn-files/027/001/733/msdncompositedoc.xml">MSDN
for download</a>. It can be used to debug scripts embedded in HTML documents
or for single JavaScript files. To debug a script from command-line use
the command-line interpreters with the /X option:

\htmlonly
<div class="fragment"><pre>
cscript /X <i>&lt;filename&gt;.js</i></pre>
</div>
\endhtmlonly

\image html msscriptdebugger.png

\subsection interdev Microsoft Visual InterDev

<a
href="http://msdn.microsoft.com/vinterdev/technical/documentation.asp">Microsoft
Visual InterDev 6.0</a> is a development environment for web applications. It
is very comfortable with debugging client-side JavaScript code. JsUnit
contains a Visual InterDev solution (.sln) and project (.vup) file for the
unit tests and the samples.

\image html interdev.png

<a href="http://msdn.microsoft.com/vinterdev/default.asp">Visual InterDev is
now integrated into Visual Studio .NET</a>.

*/
