/*
JsUnit - a JUnit port for JavaScript
Copyright (C) 1999,2000,2001,2002 Joerg Schaible

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation in version 2 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Test suites built with JsUnit are derivative works derived from tested 
classes and functions in their production; they are not affected by this 
license.
*/

/*!

\page usage Usage

\subsection codeConv Coding Conventions

<P>To create an object in JavaScript you have to use the new operator. Every
time this operator will call a function that creates automatically the new
object implicitly. The new object is of the type of the function. This means
the function's code represents the class definition, the
&quot;constructor&quot; is the function call itself. Since JsUnit 2.0 the
standard inheritance mechanism described in the JavaScript guide 1.5 for the
object model is supported and preferred.</P>

<P>JsUnit follows the scheme that all member variables are declared within
this constructor. Afterwards all member functions are declared, using the name
schema classname_memberfunctionname. All member functions are then added to
the prototype of the class. This prevents naming conflicts in the global
namespace. The first section within the constructor is used for the
inheritance. Call a base class by using the call method of its
constructor:</P> 

\htmlonly
<P><DIV CLASS="fragment"><PRE>
function ClassName( arg1, arg2 )
{
	BaseClass.call( this, arg1, arg2 );
}</PRE></DIV></P>
\endhtmlonly

<P>After calling the constuctor you should initialize the member variables by
assigning them a value:</P>

\htmlonly
<P><DIV CLASS="fragment"><PRE>
this.mMember1 = 1;
this.mMember2 = "yes";</PRE></DIV></P>
\endhtmlonly

<P>After writing the constructor it is the time to define all member
functions.  Declare the function using the class name as prefix. Assign all
functions afterwards to the prototype:</P>

\htmlonly
<P><DIV CLASS="fragment"><PRE>
function ClassName_f1() {}
function ClassName_f2() {}

ClassName.prototype = new BaseClass();
ClassName.prototype.f1 = ClassName_f1;
ClassName.prototype.f2 = ClassName_f2;</PRE></DIV></P>
\endhtmlonly

<P>It is no problem to overload a function that was already assigned in a the
base class. Call the overloaded function using its apply or call method in the
prototype of the constructor:</P>

\htmlonly
<P><DIV CLASS="fragment"><PRE>
function ClassName_f1() 
{
    BaseClass.prototype.f1.apply( this, arguments );
}
//...
ClassName.prototype.f1 = ClassName_f1;</PRE></DIV></P>
\endhtmlonly

<P>You may also define static member variables using a prototype
definition:</P>

\htmlonly
<P><DIV CLASS="fragment"><PRE>
ClassName.prototype.v1 = 1;</PRE></DIV></P>
\endhtmlonly

\subsection altSyntax Alternative Syntax

<P>The previous chapter followed the coding convention of the JavaScript
Reference Guide. As convensions imply you may use an alternative coding style,
the js2doxy Perl script will understand even this:</P>

\htmlonly
<P><DIV CLASS="fragment"><PRE>
function ClassName( arg1, arg2 )
{
	BaseClass.call( this, arg1, arg2 );
}
{
	ClassName.prototype = new BaseClass();
	ClassName.prototype.f1 = function ClassName_f1( arg1 ) 
	{
    	BaseClass.prototype.f1.call( this, arg1 );
	}
	ClassName.prototype.f2 = function() 
	{
    	BaseClass.prototype.f2.apply( this, arguments );
	}
	ClassName.prototype.v1 = 1;
}</PRE></DIV></P>
\endhtmlonly

<P>A lot of interpreters will not generate in this situation any identifier in
the second braced area to the global namespace keeping it quite clean. The
disadvantage of method f2 definition is, that the function itself has no name
and the call stack (if available for the engine) will return an anonymous 
function call.</P>

\subsection interface Interfaces

<P>JavaScript does not support interfaces (although <I>implements</I> is a
keyword). Since it is quite handy to be sure that a class supports a defined
number of functions, the system implements a new member function \a fulfills of
the class Function that perfoms this action. Since the functions of an
interface are never called, they can be implemented quite minimalistic:</P>

\htmlonly
<P><DIV CLASS="fragment"><PRE>
function InterfaceName() {}
InterfaceName.prototype.f1 = function() {}
InterfaceName.prototype.f2 = function( a, b ) {}</PRE></DIV></P>
\endhtmlonly

<P>An interface definition may only define member functions, but no member
variables. To ensure that a class fulfills this interface you call its
function \a fulfills:</P>

\htmlonly
<P><DIV CLASS="fragment"><PRE>
ClassName()
{
}
//...
ClassName.prototype.f1 = ClassName_f1;
ClassName.prototype.f2 = ClassName_f2;
ClassName.fulfills( InterfaceName );</PRE></DIV></P>
\endhtmlonly

\subsection writing Writing test cases and test suites

\dontinclude SimpleTest.js

<P>Writing unit tests you have to write at first test cases for your classes.
The programming paradigma of eXtreme Programming demands writing your test
cases first. Then you are able to programm your class against the test case,
so you know when you are ready. Anyway, writing a test case means deriving
from class TestCase:</P>

\skip SimpleTest
\until }

<P>Overload the setUp function if necessary:<P>

\skip SimpleTest_setUp
\until }

<P>Add your test fixtures:</P>

\skip SimpleTest_testDivide
\until }

<P>You may also overload the tearDown utility. To complete the class you have
to assign the methods</P>

\skip prototype
\until testAsserts;

\subsection application Creating a test application

<P>After writing the test cases we need an application to run the tests. The
application has the responsibility to include all necessary sources. Create a
TestRunner for reporting the results, add all wanted test suites to the runner
and perform the test. The TestRunner itself is normally also a derived class,
that has reporting functions that work perfectly in the system environment.
See below a sample for the Windows Scripting Host:</P>

\include AllTests.wsf

\subsection examples Examples

<P>The examples are also ports from the originals that accompany JUnit. Please
note that the last test case of SimpleTest is supposed to fail to demonstrate
this case.</P>

<P>Most supported environments cannot share their test application. Therefore
are a lot of AllTests*.* files part of the sample package. See the list below
for all deliveries:</P>

<TABLE>
<TR>
	<TD><B>Files</B></TD>
	<TD><B>Environment</B></TD>
</TR>
<TR>

	<TD>AllTests.html</TD>
	
	<TD>Any browser with a JavaScript implementation capable of
	exceptions</TD>
	
</TR>
<TR>

	<TD>AllTests.vup</TD>
	
	<TD>Project for Microsoft Visual Interdev</TD>
	
</TR>
<TR>

	<TD>AllTests.wsf</TD>
	
	<TD>Script for Windows Scripting Host. Run best with <EM>cscript</EM></TD>
	
</TR>
<TR>

	<TD>AllTestsBV<BR>AllTestsBV.jsp</TD>
	
	<TD>JavaScript Server Page of BroadVision. Use the script AllTestsBV to
	start the <EM>ctxdriver</EM> for command line invocation.</TD>
	
</TR>
<TR>

	<TD>AllTestsNS<BR>AllTestsNS.html</TD>
	
	<TD>Netscape SSJS application. The shell script uses <EM>jsac</EM> to
	compile the web application. The script generates a web file from the HTML
	source and the other used files.</TD>
	
</TR>
<TR>

	<TD>AllTests.js</TD>
	
	<TD>JavaScript to use with the JavaScript shells. Use <EM>java js.jar</EM>
	to run <em>Rhino</em> build with Java or use <EM>jsshell</EM> to run 
	<em>SpiderMonkey</em> build with C. You may also use <em>cscript</em> for
	this file.</TD>
	
</TR>
</TABLE>

*/
